apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'dagger.hilt.android.plugin'

apply plugin: 'maven-publish'

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = 'com.github.NBtang'
                artifactId = 'Carry'
                version = '1.2.2'
            }
        }
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    compileOnly 'androidx.annotation:annotation:1.1.0'

    api 'com.squareup.okhttp3:okhttp:4.8.1'

    api 'com.google.code.gson:gson:2.8.5'

    api('com.squareup.retrofit2:retrofit:2.9.0'){
        exclude module: 'okhttp'
        exclude module: 'okio'
    }
    api('com.squareup.retrofit2:converter-gson:2.9.0'){
        exclude module: 'gson'
        exclude module: 'okhttp'
        exclude module: 'okio'
        exclude module: 'retrofit'
    }
    api('com.squareup.retrofit2:adapter-rxjava2:2.9.0'){
        exclude module: 'rxjava'
        exclude module: 'okhttp'
        exclude module: 'retrofit'
        exclude module: 'okio'
    }

    api 'me.jessyan:rxerrorhandler:2.1.1'

    api 'com.jeremyliao:live-event-bus-x:1.7.2'

    api "androidx.lifecycle:lifecycle-extensions:2.2.0"
    api "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    api "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    api "androidx.lifecycle:lifecycle-common-java8:2.3.1"

    api 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'com.jakewharton.rxrelay2:rxrelay:2.1.0'

    api 'com.jakewharton.rxbinding3:rxbinding-core:3.0.0'

    api 'com.uber.autodispose:autodispose-android-ktx:1.1.0'
    api 'com.uber.autodispose:autodispose-android-archcomponents:1.1.0'
    api 'com.uber.autodispose:autodispose-android-archcomponents-ktx:1.1.0'

    api 'com.github.NBtang:Rxtray:1.1.0'
    api 'net.grandcentrix.tray:tray:0.12.0'

    api "androidx.startup:startup-runtime:1.0.0"

    // logger
    api 'com.jakewharton.timber:timber:4.7.1'
    api 'com.orhanobut:logger:2.2.0'

    implementation 'com.github.GrenderG:Toasty:1.5.0'

    implementation 'com.google.dagger:hilt-android:2.28-alpha'
    kapt 'com.google.dagger:hilt-android-compiler:2.28-alpha'
}

ext {
    //bintray 网站上你创建的仓库的名字（必配项）
    bintrayRepo = 'maven'
    //在这个仓库下的 package name（必配项）
    bintrayName = 'carry'

    publishedGroupId = 'com.laotang.quickdev'
    artifact = 'carry'
    libraryVersion = '1.0.4'

    libraryName = 'carry'
    libraryDescription = ''
    siteUrl = ''
    gitUrl = ''

    //开发者信息，也是必配的吧
    developerId = 'laotang'
    developerName = 'laotang'
    developerEmail = 'xiaoyaobeibeizhu@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

apply plugin: 'com.github.dcendents.android-maven'

//group = publishedGroupId                               // Maven Group ID for the artifact
group = 'https://github.com/NBtang'

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}

task javadoc(type: Javadoc) {
    options.encoding="utf-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//同时添加三个方法
//task generateSourcesJar(type: Jar) {
//    group = 'jar'
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}
task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//    archives javadocJar
//    archives sourcesJar
    archives generateJavadoc //javadocJar
    archives generateSourcesJar //sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        userOrg = 'nblaotang'
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}